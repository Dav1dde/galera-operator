// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetStateByNameHandlerFunc turns a function with the right signature into a get state by name handler
type GetStateByNameHandlerFunc func(GetStateByNameParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetStateByNameHandlerFunc) Handle(params GetStateByNameParams) middleware.Responder {
	return fn(params)
}

// GetStateByNameHandler interface for that can handle valid get state by name params
type GetStateByNameHandler interface {
	Handle(GetStateByNameParams) middleware.Responder
}

// NewGetStateByName creates a new http.Handler for the get state by name operation
func NewGetStateByName(ctx *middleware.Context, handler GetStateByNameHandler) *GetStateByName {
	return &GetStateByName{Context: ctx, Handler: handler}
}

/*GetStateByName swagger:route GET /state/{name} getStateByName

Check the state of the provided backup or restore

*/
type GetStateByName struct {
	Context *middleware.Context
	Handler GetStateByNameHandler
}

func (o *GetStateByName) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetStateByNameParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
