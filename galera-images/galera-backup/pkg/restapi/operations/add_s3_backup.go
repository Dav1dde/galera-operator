// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// AddS3BackupHandlerFunc turns a function with the right signature into a add s3 backup handler
type AddS3BackupHandlerFunc func(AddS3BackupParams) middleware.Responder

// Handle executing the request and returning a response
func (fn AddS3BackupHandlerFunc) Handle(params AddS3BackupParams) middleware.Responder {
	return fn(params)
}

// AddS3BackupHandler interface for that can handle valid add s3 backup params
type AddS3BackupHandler interface {
	Handle(AddS3BackupParams) middleware.Responder
}

// NewAddS3Backup creates a new http.Handler for the add s3 backup operation
func NewAddS3Backup(ctx *middleware.Context, handler AddS3BackupHandler) *AddS3Backup {
	return &AddS3Backup{Context: ctx, Handler: handler}
}

/*AddS3Backup swagger:route POST /s3 addS3Backup

Add a new backup to the provided S3 bucket

backup to S3 storage

*/
type AddS3Backup struct {
	Context *middleware.Context
	Handler AddS3BackupHandler
}

func (o *AddS3Backup) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewAddS3BackupParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
