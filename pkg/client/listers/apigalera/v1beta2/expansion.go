// Copyright 2019 Orange and/or its affiliates. All rights reserved
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Code generated by lister-gen. DO NOT EDIT.

package v1beta2

import (
	"fmt"
	apigalera "galera-operator/pkg/apis/apigalera/v1beta2"
	pkggalera "galera-operator/pkg/galera"
	corev1 "k8s.io/api/core/v1"
	"k8s.io/apimachinery/pkg/labels"
)

// GaleraListerExpansion allows custom methods to be added to
// GaleraLister.
type GaleraListerExpansion interface{
	GetPodGaleras(pod *corev1.Pod) ([]*apigalera.Galera, error)
	GetClaimGaleras(claim *corev1.PersistentVolumeClaim) ([]*apigalera.Galera, error)
}

// GaleraNamespaceListerExpansion allows custom methods to be added to
// GaleraNamespaceLister.
type GaleraNamespaceListerExpansion interface{}

// GaleraBackupListerExpansion allows custom methods to be added to
// GaleraBackupLister.
type GaleraBackupListerExpansion interface{}

// GaleraBackupNamespaceListerExpansion allows custom methods to be added to
// GaleraBackupNamespaceLister.
type GaleraBackupNamespaceListerExpansion interface{}

// UpgradeConfigListerExpansion allows custom methods to be added to
// UpgradeConfigLister.
type UpgradeConfigListerExpansion interface{}

// UpgradeConfigNamespaceListerExpansion allows custom methods to be added to
// UpgradeConfigNamespaceLister.
type UpgradeConfigNamespaceListerExpansion interface{}

// UpgradeRuleListerExpansion allows custom methods to be added to
// UpgradeRuleLister.
type UpgradeRuleListerExpansion interface{}

// UpgradeRuleNamespaceListerExpansion allows custom methods to be added to
// UpgradeRuleNamespaceLister.
type UpgradeRuleNamespaceListerExpansion interface{}

// GetPodGaleras returns a list of Galeras that potentially match a pod.
// Only the one specified in the Pod's ControllerRef will actually manage it.
// Returns an error only if no matching Galeras are found.
func (gl *galeraLister) GetPodGaleras(pod *corev1.Pod) ([]*apigalera.Galera, error) {
	var selector labels.Selector
	var pg *apigalera.Galera

	if len(pod.Labels) == 0 {
		return nil, fmt.Errorf("no Galeras found for pod %v because it has no labels", pod.Name)
	}

	list, err := gl.Galeras(pod.Namespace).List(labels.Everything())
	if err != nil {
		return nil, err
	}

	var pgList []*apigalera.Galera
	for i := range list {
		pg = list[i]
		if pg.Namespace != pod.Namespace {
			continue
		}
		selector, err = pkggalera.SelectorForGalera(pg.Labels, pg.Name, pg.Namespace)
		if err != nil {
			return nil, fmt.Errorf("invalid selector: %v", err)
		}

		// If a Galera with a nil or empty selector creeps in, it should match nothing, not everything.
		if selector.Empty() || !selector.Matches(labels.Set(pod.Labels)) {
			continue
		}
		pgList = append(pgList, pg)
	}

	if len(pgList) == 0 {
		return nil, fmt.Errorf("could not find Galera for pod %s in namespace %s with labels: %v", pod.Name, pod.Namespace, pod.Labels)
	}

	return pgList, nil
}

// GetClaimGaleras returns a list of Galeras that potentially match a claim.
// Only the one specified in the claim's ControllerRef will actually manage it.
// Returns an error only if no matching Galeras are found.
func (gl *galeraLister) GetClaimGaleras(claim *corev1.PersistentVolumeClaim) ([]*apigalera.Galera, error) {
	var selector labels.Selector
	var pg *apigalera.Galera

	if len(claim.Labels) == 0 {
		return nil, fmt.Errorf("no Galeras found for claim %v because it has no labels", claim.Name)
	}

	list, err := gl.Galeras(claim.Namespace).List(labels.Everything())
	if err != nil {
		return nil, err
	}

	var pgList []*apigalera.Galera
	for i := range list {
		pg = list[i]
		if pg.Namespace != claim.Namespace {
			continue
		}
		selector, err = pkggalera.SelectorForGalera(pg.Labels, pg.Name, pg.Namespace)
		if err != nil {
			return nil, fmt.Errorf("invalid selector: %v", err)
		}

		// If a Galera with a nil or empty selector creeps in, it should match nothing, not everything.
		if selector.Empty() || !selector.Matches(labels.Set(claim.Labels)) {
			continue
		}
		pgList = append(pgList, pg)
	}

	if len(pgList) == 0 {
		return nil, fmt.Errorf("could not find Galera for claim %s in namespace %s with labels: %v", claim.Name, claim.Namespace, claim.Labels)
	}

	return pgList, nil
}
