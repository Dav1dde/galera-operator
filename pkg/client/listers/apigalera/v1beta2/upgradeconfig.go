// Copyright 2020 Orange SA
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Code generated by lister-gen. DO NOT EDIT.

package v1beta2

import (
	v1beta2 "galera-operator/pkg/apis/apigalera/v1beta2"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// UpgradeConfigLister helps list UpgradeConfigs.
type UpgradeConfigLister interface {
	// List lists all UpgradeConfigs in the indexer.
	List(selector labels.Selector) (ret []*v1beta2.UpgradeConfig, err error)
	// UpgradeConfigs returns an object that can list and get UpgradeConfigs.
	UpgradeConfigs(namespace string) UpgradeConfigNamespaceLister
	UpgradeConfigListerExpansion
}

// upgradeConfigLister implements the UpgradeConfigLister interface.
type upgradeConfigLister struct {
	indexer cache.Indexer
}

// NewUpgradeConfigLister returns a new UpgradeConfigLister.
func NewUpgradeConfigLister(indexer cache.Indexer) UpgradeConfigLister {
	return &upgradeConfigLister{indexer: indexer}
}

// List lists all UpgradeConfigs in the indexer.
func (s *upgradeConfigLister) List(selector labels.Selector) (ret []*v1beta2.UpgradeConfig, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta2.UpgradeConfig))
	})
	return ret, err
}

// UpgradeConfigs returns an object that can list and get UpgradeConfigs.
func (s *upgradeConfigLister) UpgradeConfigs(namespace string) UpgradeConfigNamespaceLister {
	return upgradeConfigNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// UpgradeConfigNamespaceLister helps list and get UpgradeConfigs.
type UpgradeConfigNamespaceLister interface {
	// List lists all UpgradeConfigs in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1beta2.UpgradeConfig, err error)
	// Get retrieves the UpgradeConfig from the indexer for a given namespace and name.
	Get(name string) (*v1beta2.UpgradeConfig, error)
	UpgradeConfigNamespaceListerExpansion
}

// upgradeConfigNamespaceLister implements the UpgradeConfigNamespaceLister
// interface.
type upgradeConfigNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all UpgradeConfigs in the indexer for a given namespace.
func (s upgradeConfigNamespaceLister) List(selector labels.Selector) (ret []*v1beta2.UpgradeConfig, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta2.UpgradeConfig))
	})
	return ret, err
}

// Get retrieves the UpgradeConfig from the indexer for a given namespace and name.
func (s upgradeConfigNamespaceLister) Get(name string) (*v1beta2.UpgradeConfig, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta2.Resource("upgradeconfig"), name)
	}
	return obj.(*v1beta2.UpgradeConfig), nil
}
