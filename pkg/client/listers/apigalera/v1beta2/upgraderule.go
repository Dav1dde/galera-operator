// Copyright 2020 Orange SA
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Code generated by lister-gen. DO NOT EDIT.

package v1beta2

import (
	v1beta2 "galera-operator/pkg/apis/apigalera/v1beta2"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// UpgradeRuleLister helps list UpgradeRules.
type UpgradeRuleLister interface {
	// List lists all UpgradeRules in the indexer.
	List(selector labels.Selector) (ret []*v1beta2.UpgradeRule, err error)
	// UpgradeRules returns an object that can list and get UpgradeRules.
	UpgradeRules(namespace string) UpgradeRuleNamespaceLister
	UpgradeRuleListerExpansion
}

// upgradeRuleLister implements the UpgradeRuleLister interface.
type upgradeRuleLister struct {
	indexer cache.Indexer
}

// NewUpgradeRuleLister returns a new UpgradeRuleLister.
func NewUpgradeRuleLister(indexer cache.Indexer) UpgradeRuleLister {
	return &upgradeRuleLister{indexer: indexer}
}

// List lists all UpgradeRules in the indexer.
func (s *upgradeRuleLister) List(selector labels.Selector) (ret []*v1beta2.UpgradeRule, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta2.UpgradeRule))
	})
	return ret, err
}

// UpgradeRules returns an object that can list and get UpgradeRules.
func (s *upgradeRuleLister) UpgradeRules(namespace string) UpgradeRuleNamespaceLister {
	return upgradeRuleNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// UpgradeRuleNamespaceLister helps list and get UpgradeRules.
type UpgradeRuleNamespaceLister interface {
	// List lists all UpgradeRules in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1beta2.UpgradeRule, err error)
	// Get retrieves the UpgradeRule from the indexer for a given namespace and name.
	Get(name string) (*v1beta2.UpgradeRule, error)
	UpgradeRuleNamespaceListerExpansion
}

// upgradeRuleNamespaceLister implements the UpgradeRuleNamespaceLister
// interface.
type upgradeRuleNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all UpgradeRules in the indexer for a given namespace.
func (s upgradeRuleNamespaceLister) List(selector labels.Selector) (ret []*v1beta2.UpgradeRule, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta2.UpgradeRule))
	})
	return ret, err
}

// Get retrieves the UpgradeRule from the indexer for a given namespace and name.
func (s upgradeRuleNamespaceLister) Get(name string) (*v1beta2.UpgradeRule, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta2.Resource("upgraderule"), name)
	}
	return obj.(*v1beta2.UpgradeRule), nil
}
